import { c as create_ssr_component } from "../../../chunks/ssr.js";
import "../../../chunks/client.js";
const css = {
  code: ".create-node-form.svelte-vvq35s{background-color:#f0f0f0;padding:20px;border-radius:8px;margin-top:20px}.error.svelte-vvq35s{color:red}.success.svelte-vvq35s{color:green}label.svelte-vvq35s{display:block;margin-top:10px}select.svelte-vvq35s{width:100%;padding:8px;margin-top:5px}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nimport { goto } from \\"$app/navigation\\";\\nimport * as auth0 from \\"$lib/services/auth0\\";\\nimport WordNodeForm from \\"../nodes/word/WordNodeForm.svelte\\";\\nlet user = null;\\nlet selectedNodeType = \\"\\";\\nlet error = null;\\nlet success = null;\\nonMount(async () => {\\n  try {\\n    const fetchedUser = await auth0.getAuth0User();\\n    if (fetchedUser) {\\n      user = fetchedUser;\\n    } else {\\n      error = \\"Failed to fetch user data\\";\\n    }\\n  } catch (e) {\\n    error = \\"Failed to fetch user data\\";\\n  }\\n});\\nfunction handleNodeCreated(event) {\\n  if (event.detail.success) {\\n    success = event.detail.message;\\n    error = null;\\n    if (event.detail.data && event.detail.data.id) {\\n      goto(`/nodes/word/${event.detail.data.id}`);\\n    }\\n  } else {\\n    error = event.detail.message;\\n    success = null;\\n  }\\n}\\nfunction handleWordExists(event) {\\n  goto(`/nodes/word/${event.detail.word}`);\\n}\\n<\/script>\\n  \\n  <h1>Create New Node</h1>\\n  \\n  {#if error}\\n    <p class=\\"error\\">{error}</p>\\n  {/if}\\n  \\n  {#if success}\\n    <p class=\\"success\\">{success}</p>\\n  {/if}\\n  \\n  <div class=\\"create-node-form\\">\\n    <label for=\\"node-type\\">Select Node Type:</label>\\n    <select id=\\"node-type\\" bind:value={selectedNodeType}>\\n      <option value=\\"\\">Select a node type</option>\\n      <option value=\\"word\\">Word</option>\\n    </select>\\n  \\n    {#if selectedNodeType === \'word\'}\\n      <WordNodeForm \\n        on:nodeCreated={handleNodeCreated} \\n        on:wordExists={handleWordExists}\\n        {user} \\n      />\\n    {/if}\\n  </div>\\n  \\n  <style>\\n  .create-node-form {\\n    background-color: #f0f0f0;\\n    padding: 20px;\\n    border-radius: 8px;\\n    margin-top: 20px;\\n  }\\n  .error {\\n    color: red;\\n  }\\n  .success {\\n    color: green;\\n  }\\n  label {\\n    display: block;\\n    margin-top: 10px;\\n  }\\n  select {\\n    width: 100%;\\n    padding: 8px;\\n    margin-top: 5px;\\n  }\\n</style>"],"names":[],"mappings":"AAgEE,+BAAkB,CAChB,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IACd,CACA,oBAAO,CACL,KAAK,CAAE,GACT,CACA,sBAAS,CACP,KAAK,CAAE,KACT,CACA,mBAAM,CACJ,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,IACd,CACA,oBAAO,CACL,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,GACd"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `<h1 data-svelte-h="svelte-a91774">Create New Node</h1> ${``} ${``} <div class="create-node-form svelte-vvq35s"><label for="node-type" class="svelte-vvq35s" data-svelte-h="svelte-16fub45">Select Node Type:</label> <select id="node-type" class="svelte-vvq35s"><option value="" data-svelte-h="svelte-1ylcgyf">Select a node type</option><option value="word" data-svelte-h="svelte-183aq5q">Word</option></select> ${``} </div>`;
});
export {
  Page as default
};
